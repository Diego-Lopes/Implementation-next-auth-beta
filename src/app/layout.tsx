import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { getUser } from "./lib/dal";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const user = await getUser();
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ContextProvider>
          {children}
        </ContextProvider>
      </body>
    </html>
  );
}

/**
 * Usar provedores de contexto para auth funciona devido ao interleaving . 
 * No entanto, o React contextnão é suportado em Server Components, 
 * tornando-os aplicáveis ​​somente a Client Components.
 * 
 * Isso funciona, mas todos os componentes filhos do servidor 
 * serão renderizados primeiro no servidor e não terão acesso 
 * aos dados de sessão do provedor de contexto:
 */
